package spdvi;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author DevMike
 */
public class MainForm extends javax.swing.JFrame {
    final static String fileName = "src/spdvi/users.txt";
    ArrayList<User> users = new ArrayList<User>();
    private boolean confirmSave = false;
    private boolean dataChanged = false;
    
    /**
     * Creates new form MainFrame
     */
    public MainForm() {
        initComponents();
    }

    public boolean isConfirmSave() {
        return confirmSave;
    }

    public void setConfirmSave(boolean confirmSave) {
        this.confirmSave = confirmSave;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        txtId = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtBirthDate = new javax.swing.JTextField();
        radGenderMale = new javax.swing.JRadioButton();
        radGenderFemale = new javax.swing.JRadioButton();
        btnInsert = new javax.swing.JButton();
        chkIsAlive = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList<>();
        btnLoadIntoList = new javax.swing.JButton();
        btnDeleteSelected = new javax.swing.JButton();
        btnSaveListToFile = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblBirth = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        mnuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        mnuCRUD = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jScrollPane1.setViewportView(jEditorPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Manager");
        setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        setLocation(new java.awt.Point(400, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtId.setText("Id");
        txtId.setName(""); // NOI18N
        txtId.setNextFocusableComponent(txtFirstName);
        txtId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIdFocusGained(evt);
            }
        });

        txtFirstName.setText("FirstName");
        txtFirstName.setNextFocusableComponent(txtLastName);
        txtFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusGained(evt);
            }
        });

        txtLastName.setText("LastName");
        txtLastName.setNextFocusableComponent(txtBirthDate);
        txtLastName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLastNameFocusGained(evt);
            }
        });

        txtBirthDate.setText("2000-01-01");
        txtBirthDate.setNextFocusableComponent(chkIsAlive);
        txtBirthDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBirthDateFocusGained(evt);
            }
        });

        buttonGroup1.add(radGenderMale);
        radGenderMale.setSelected(true);
        radGenderMale.setText("Male");
        radGenderMale.setNextFocusableComponent(radGenderFemale);

        buttonGroup1.add(radGenderFemale);
        radGenderFemale.setText("Female");
        radGenderFemale.setNextFocusableComponent(btnInsert);

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        chkIsAlive.setText("Alive");
        chkIsAlive.setNextFocusableComponent(btnInsert);

        lstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstUsersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstUsers);

        btnLoadIntoList.setText("Load");
        btnLoadIntoList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadIntoListActionPerformed(evt);
            }
        });

        btnDeleteSelected.setText("Delete");
        btnDeleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedActionPerformed(evt);
            }
        });

        btnSaveListToFile.setText("Save");
        btnSaveListToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveListToFileActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblId.setText("User's ID");

        lblName.setText("User's Name");

        lblLastName.setText("User's last Name");

        lblBirth.setText("User's date of birth:");

        lblGender.setText("User's gender");

        mnuFile.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnuFile.add(jMenuItem1);

        mnuBar.add(mnuFile);

        mnuCRUD.setText("CRUD");

        jMenuItem2.setText("Insert");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        mnuCRUD.add(jMenuItem2);

        jMenuItem3.setText("Load");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        mnuCRUD.add(jMenuItem3);

        jMenuItem4.setText("Update");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        mnuCRUD.add(jMenuItem4);

        jMenuItem5.setText("Delete");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        mnuCRUD.add(jMenuItem5);

        mnuBar.add(mnuCRUD);

        mnuHelp.setText("Help");
        mnuBar.add(mnuHelp);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnLoadIntoList, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSaveListToFile)
                                .addGap(115, 115, 115))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdate)
                            .addComponent(btnDeleteSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radGenderMale)
                                .addGap(18, 18, 18)
                                .addComponent(radGenderFemale))
                            .addComponent(chkIsAlive, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBirth)
                            .addComponent(lblGender))
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(lblId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblLastName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBirth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblGender)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radGenderMale)
                            .addComponent(radGenderFemale))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkIsAlive))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadIntoList)
                    .addComponent(btnDeleteSelected)
                    .addComponent(btnSaveListToFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        
        LocalDate birthDate = LocalDate.now();
        try {
            birthDate = LocalDate.parse(txtBirthDate.getText());
            
            String maleOrFemale;
            if (radGenderMale.isSelected()) {
                maleOrFemale = "Male";
            }
            else 
                maleOrFemale = "Female";
            User newUser = new User(txtId.getText(), txtFirstName.getText(), txtLastName.getText(), birthDate, maleOrFemale, chkIsAlive.isSelected());
            users.add(newUser);
            
            UpdateUserListView();
            dataChanged = true;
        }
        catch (Exception ex) {
            EncuestaDialog encuesta = new EncuestaDialog(this, true);
            encuesta.getLblMessage().setText(ex.getMessage());
            encuesta.setVisible(true);
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void txtIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdFocusGained
        // TODO add your handling code here:
        txtId.selectAll();
    }//GEN-LAST:event_txtIdFocusGained

    private void txtFirstNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusGained
        txtFirstName.selectAll();
    }//GEN-LAST:event_txtFirstNameFocusGained

    private void txtLastNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastNameFocusGained
        txtLastName.selectAll();
    }//GEN-LAST:event_txtLastNameFocusGained

    private void txtBirthDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBirthDateFocusGained
        txtBirthDate.selectAll();
    }//GEN-LAST:event_txtBirthDateFocusGained

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        SwingUtilities.getRootPane(this).setDefaultButton(btnInsert);
        
        try {
            users.clear();
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String currentLine = reader.readLine();
            while (currentLine != null) {
                String[] fields = currentLine.split(",");
                User user = new User(fields[0], fields[2], fields[1],
                        LocalDate.parse(fields[3]), fields[4],
                        fields[5].equals("Alive"));                 
                users.add(user);
                currentLine = reader.readLine();
            }
            UpdateUserListView();
        }
        catch(FileNotFoundException fnfe) {
            fnfe.printStackTrace();
        }
        catch(IOException ioe) {
            ioe.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void lstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstUsersValueChanged
        //lblList.setText( lstUsers.getSelectedValue());
        String selectedUser = lstUsers.getSelectedValue();
        if (selectedUser != null) {
            int lastIndex = selectedUser.indexOf(":");
            String selectedUserId = selectedUser.substring(0, lastIndex);
            for (User u: users) {
                if (u.getId().equals(selectedUserId)) {
                    txtId.setText(u.getId());
                    txtFirstName.setText(u.getFirstName());
                    txtLastName.setText(u.getLastName());
                    String formattedDate = u.getBirthDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    txtBirthDate.setText(formattedDate);
                    if ("Male".equals(u.getGender())) {
                        radGenderMale.setSelected(true);
                        //radGenderFemale.setSelected(false);
                    }
                    else if ("Female".equals(u.getGender())) {
                        //radGenderMale.setSelected(false);
                        radGenderFemale.setSelected(true);
                    }
                    else {
                        //ERROR: Throw exception
                    }
                    chkIsAlive.setSelected(u.isIsAlive());    
                }
            }            
        }

    }//GEN-LAST:event_lstUsersValueChanged

    private void btnLoadIntoListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadIntoListActionPerformed
        try {
            users.clear();
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            String currentLine = reader.readLine();
            while (currentLine != null) {
                String[] fields = currentLine.split(",");
                User user = new User(fields[0], fields[2], fields[1],
                        LocalDate.parse(fields[3]), fields[4],
                        fields[5].equals("Alive")); 
               
                users.add(user);
                currentLine = reader.readLine();
            }
            reader.close();
            UpdateUserListView();
        }
        catch(FileNotFoundException fnfe) {
            fnfe.printStackTrace();
        }
        catch(IOException ioe) {
            ioe.printStackTrace();
        }
        
    }//GEN-LAST:event_btnLoadIntoListActionPerformed

    private void btnDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedActionPerformed
        String selectedUser = lstUsers.getSelectedValue();
        int lastIndex = selectedUser.indexOf(":");
        //int selectedUserId = Integer.parseInt( selectedUser.substring(0, lastIndex-1) );
        String selectedUserId = selectedUser.substring(0, lastIndex);

        // TODO: Buscar en la lista users el objeto User que tiene como Id == selectedUserId y eliminarlo de la lista
        for (User u: users) {
            if (u.getId().equals(selectedUserId)) {
                users.remove(u);
                break;
//                DefaultListModel usersListModel = (DefaultListModel)lstUsers.getModel();
//                try{
//                    usersListModel.removeElement(u.toString());
//                }
//                catch(NullPointerException npe) {
//                    npe.printStackTrace();
//                }
            }
        }
        
//        DefaultListModel usersListModel = (DefaultListModel)lstUsers.getModel();
        UpdateUserListView();
        dataChanged = true;
    }//GEN-LAST:event_btnDeleteSelectedActionPerformed

    private void btnSaveListToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveListToFileActionPerformed
        ConfirmSaveDialog saveDialog = new ConfirmSaveDialog(this, true);
        saveDialog.setVisible(true);
        
        if (this.confirmSave) {
            SaveToFile();
            dataChanged = false;
        }
    }//GEN-LAST:event_btnSaveListToFileActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        for (User u: users) {
            if (u.getId().equals(txtId.getText())) {
                u.setFirstName(txtFirstName.getText());
                u.setLastName(txtLastName.getText());
                u.setBirthDate(LocalDate.parse(txtBirthDate.getText()));
                u.setGender(radGenderMale.isSelected() ? "Male" : "Female");
                u.setIsAlive(chkIsAlive.isSelected());
                UpdateUserListView();
                dataChanged = true;
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        if (dataChanged) {
            ConfirmSaveDialog saveDialog = new ConfirmSaveDialog(this, true);
            saveDialog.setVisible(true);
            if (confirmSave)
                SaveToFile();
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        btnInsert.doClick();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        btnLoadIntoList.doClick();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        btnUpdate.doClick();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        btnDeleteSelected.doClick();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void UpdateUserListView() {
        //usersListModel = (DefaultListModel)lstUsers.getModel();
        //https://stackoverflow.com/questions/10375115/jlist-getmodel-classcastexception
//        DefaultListModel usersListModel = (DefaultListModel)lstUsers.getModel();
//        usersListModel.clear();
//        
//        for(User u: users) {
//            usersListModel.addElement(u.toString());
//        }
        DefaultListModel usersListModel = new DefaultListModel();
        for(User u: users) {
            usersListModel.addElement(u.toString());
        }
        lstUsers.setModel(usersListModel);      
    }
    
    private void SaveToFile() {
        
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
            for(User u: users) {
                String formattedDate = u.getBirthDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                String userString = u.getId() + "," + u.getLastName() + ","
                        + u.getFirstName() + ","
                        + formattedDate
                        + "," + u.getGender() + "," + (u.isIsAlive() ? "Alive" : "Dead") 
                        + System.lineSeparator();
                writer.append(userString);
            }
            writer.close();
        }
        catch(IOException ioe) {
            System.out.println(ioe.getMessage());
        }
                
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteSelected;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLoadIntoList;
    private javax.swing.JButton btnSaveListToFile;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkIsAlive;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBirth;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblName;
    private javax.swing.JList<String> lstUsers;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenu mnuCRUD;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JRadioButton radGenderFemale;
    private javax.swing.JRadioButton radGenderMale;
    private javax.swing.JTextField txtBirthDate;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLastName;
    // End of variables declaration//GEN-END:variables

}
